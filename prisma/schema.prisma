generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model members {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  nickname     String
  role         String
  profile      String
  signature    String
  bio          String         @db.Text
  status       String         @default("ACTI") @db.Char(4)
  memberSince  DateTime       @default(now())
  password     String         @default("$2b$12$yCsRqjOOztwejZWgFzZiU.HdCsIl0gr7xOOIaU.Py65iijXJeptu6")
  permission   Int            @default(0)
  track        String?
  year         Int            @default(11)
  letterSigner letterSigner[]
  articles     articles[]     @relation("articlesTomembers")
}

model articles {
  id             Int       @id @default(autoincrement())
  headline       String    @unique
  content        String    @db.Text
  cover          String
  publishingDate DateTime  @default(now())
  published      Boolean   @default(false)
  issuesId       Int?
  category       String    @default("other")
  views          Int       @default(0)
  docId          String?
  issue          issues?   @relation(fields: [issuesId], references: [id])
  main           issues?   @relation("main-article")
  member         members[] @relation("articlesTomembers")

  @@index([issuesId], map: "articles_issuesId_fkey")
}

model issues {
  id             Int        @id @default(autoincrement())
  name           String     @default("default")
  isSpecial      Boolean    @default(false)
  cover          String
  publishingDate DateTime   @default(now())
  published      Boolean    @default(false)
  lettersId      Int?
  mainArticlesId Int?       @unique
  pdfLink        String     @default("./")
  pdfViewCount   Int        @default(0)
  academic_year  String     @default("2023/24") @db.VarChar(7)
  articles       articles[]
  letter         letters?   @relation(fields: [lettersId], references: [id])
  main           articles?  @relation("main-article", fields: [mainArticlesId], references: [id])

  @@index([lettersId], map: "issues_lettersId_fkey")
}

model letters {
  id           Int            @id @default(autoincrement())
  sender       String
  content      String         @db.Text
  issues       issues[]
  letterSigner letterSigner[]
}

model letterSigner {
  lettersId Int
  membersId Int
  signedAt  DateTime @default(now())
  letters   letters  @relation(fields: [lettersId], references: [id])
  members   members  @relation(fields: [membersId], references: [id])

  @@id([lettersId, membersId])
  @@index([membersId], map: "letterSigner_membersId_fkey")
}
